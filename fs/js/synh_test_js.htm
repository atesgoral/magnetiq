<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<title>Syntax Highlighter - JavaScript Test</title>
<link rel="stylesheet" type="text/css" href="synh_test.css"/>
<script type="text/javascript" src="synh.js"></script>
</head>
<body onload="syntaxHighlightElem(document.getElementById('test'), 'en-javascript')">
<pre id="test">

/*  1 Comments ============================================================== */
    
/*  1.1 Single-line comment */

    // This is a single-line comment
   
/*  1.2 Block comment */

    /* This is a *
       block comment */

/*  1.3 Single-line comment inside block comment */

    /* // This is not a single-line comment */
    
/*  3 Strings =============================================================== */

/*  3.1 String literal with double quotes */

    var str_3_1 = "This is a string";

/*  3.2 String literal with single quotes */

    var str_3_2 = 'This is a string';

/*  3.3 String literal with double quotes, containing single quotes */

    var str_3_3 = "This is a 'string'";

/*  3.4 String literal with single quotes, containing double quotes */

    var str_3_4 = 'This is a "string"';
   
/*  3.5 String literal with double quotes, containing escaped double quotes */

    var str_3_5 = "This is a \"string\"";

/*  3.6 String literal with single quotes, containing escaped single quotes */

    var str_3_6 = 'This is a \'string\'';

/*  3.7 Single-line comment inside string literal */

    var str_3_7 = "// This is not a single-line comment";

/*  3.8 Block comment inside string literal */

    var str_3_8 = "/* This is not a block comment */";

/*  3.9 Number inside string literal */

    var str_3_9 = "42 42.53 0x1a";

/*  3.10 Statement, operator inside string literal */

    var str_3_10 = "function typeof";

/*  2 Regular expressions =================================================== */

/*  2.1 Regular expression literal */

    var re_2_1 = /This is a regular expression/;

/*  2.2 Regular expression literal with flags */

    var re_2_2 = /This is a regular expression/gim;

/*  2.3 Regular expression literal with unknown flags */

    var re_2_3 = /This is a regular expression/xyz;
    
/*  2.4 Regular expression literal with escaped forward slash */

    var re_2_4 = /This is a \/regular\/ expression/g;

/*  4 Boolean =============================================================== */

    var bool_arr_4 = [ true, false ];

/*  4 Numbers =============================================================== */

/*  4.1 Integer */

    var num_4_1 = 42;

/*  4.2 Negative integer */

    var num_4_2 = -42;

/*  4.3 Decimal */

    var num_arr_4_3 = [ 42.53, .53, 42. ];

/*  4.4 Integer exponential */

    var num_arr_4_4 = [ 42E5, 42e6 ];

/*  4.5 Decimal exponential */

    var num_4_5 = 42.53e5;

/*  4.6 Exponential with negative power */

    var num_4_6 = 42E-5;

/*  4.7 Negative decimal exponential with negative power */

    var num_4_7 = -42.53e-5;

/*  4.8 Hexadecimal */

    var num_arr_4_8 = [ 0x2a, 0x1234CDEF ];

/*  5 Built-in objects ====================================================== */

    var obj_5_1 = new Array();
    var obj_5_2 = new Boolean();
    var obj_5_3 = new Date();
    var obj_5_4 = new Function();
    var obj_5_5 = new Math();
    var obj_5_6 = new Number();
    var obj_5_7 = new Object();
    var obj_5_8 = new RegExp();
    var obj_5_9 = new String();

/*  6 Top-level properties, special values ================================== */

    var v_6_1 = Infinity;
    var v_6_2 = NaN;
    var v_6_3 = undefined;
    var v_6_4 = null;

/*  7 Statements, operators ================================================= */

var obj = new Object();

const short_pi = 3.14;

function doit(b)
{
    for (var k in obj)
    {
        if (k == "str1")
        {
            break;
        }
        else if (k == "str2")
        {
            try
            {
                if (obj[k].test(/hello/i)
                {
                    throw "hello";
                }
            }
            catch (ex)
            {
                return ex;
            }
        }
        else
        {
            continue;
        }
    }

    if (b)
    {
        var x = 1;
        
        do
        {
            with (document)
            {
                switch (x)
                {
                case 1:
                    write("one");
                    break;
                case 2:
                    write("two");
                    break;
                default:
                    write(x);
                    break;
                }
            }
            
            x += x;
        }
        while (x &lt; 4096);
    }
    else
    {
        return false;
    }
}

/*  8 Not handled =========================================================== */

/*  8.1 Label */

    label1:

/*  ========================================================================= */
</pre>
</body>
</html>
<!--
2 re:
decimal: .454 and 5.
negative: -34

2 example:
export
import

wtf:
get set ????
__defineGetter__ __defineSetter__ ???
-->
